n = 70
#define polynomial ring in which the initial state variables and the keystream bits exist
R.<s0,s1,s2,s3,s4,s5,y0,y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48,y49,y50,y51,y52,y53,y54,y55,y56,y57,y58,y59,y60,y61,y62,y63,y64> = PolynomialRing(GF(2))

R1.<s0,s1,s2,s3,s4,s5> = PolynomialRing(GF(2))
#create a matrix 's' to hold the initial state variables
s = [s0,s1,s2,s3,s4,s5]

#create a matrix to hold all the output variables
Y = [y0,y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48,y49,y50,y51,y52,y53,y54,y55,y56,y57,y58,y59,y60,y61,y62,y63,y64]
# [1, 1, 1, 1, 0, 1, 1]
# O= [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1]


#We can consider 's' as a register that will be shifted for a specified number of times. Thus, there will exist more entries than simply those defined in 's'.
#We therefore initialise a vector 'add' that will be appended to s to hold all the update bits (one vector for equations with respect to keystream bits S and one with respect the the linear approximation G).
add=list(0for i in (1..256))
S = s+add
G = s+add

#Generate equations for update using output bits
# S[6] = S[0]+S[2]+S[3]+O[0]
for i in range(6,n):
    S[i] = (S[i-6]+S[i-4]+S[i-3]+Y[i-6])
    # S[i] = (S[i-6]+S[i-5]+S[i-4]+S[i-1]+O[i-6])
#     S[i] = (S[i-6]+S[i-3]+O[i-6])
    # S[i] = (S[i-6]+S[i-5]+S[i-2]+S[i-1]+O[i-6])
    # S[i] = (S[i-6]+S[i-4]+O[i-6])
    #S[i] = (S[i-4]+S[i-3]+O[i-6])
    # S[i] = (S[i-5]+S[i-4]+S[i-1]+O[i-6])

    # print(i, S[i])

#Generate equations for update using linear approximation
for i in range(7,n):
    #G_approx = s1+s2+s6 with bias agreeing 48 for the true update function s1+s2+s6+s3s5s7
    G[i] = S[i-7]+S[i-6]+S[i-2]+S[i-5]*S[i-3]*S[i-1]
#   

    #G_approx = r0+r1 with bias agreeing 48 for the true update function  r0 + r1 + r2r3 + r4r5r6.
    # G[i] = S[i-7]+S[i-6]
    
    #G_approx = r0+r1+r2 with bias agreeing 48 for the true update function  r0 + r1 + r2r3 + r4r5r6.
    # G[i] = S[i-7]+S[i-6]+S[i-5]
    
    #G_approx = r0+r1+r3 with bias agreeing 48 for the true update function  r0 + r1 + r2r3 + r4r5r6.
    # G[i] = S[i-7]+S[i-6]+S[i-4]
    
    #G_approx = r0+r1+r2+r3 with bias agreeing 48 for the true update function  r0 + r1 + r2r3 + r4r5r6.
    # G[i] = S[i-7]+S[i-6]+S[i-5]+S[i-4]
    
    #G_approx = s1+s2+s3 with bias agreeing 24 for the true update function s1+s2+s3s4+s5s6s7
    # G[i] = S[i-7]+S[i-6]+S[i-5]
    #G_approx = s1+s2+s3 with bias agreeing 24 for the true update function s1+s2+s3s4+s5s6s7
    # G[i] = S[i-7]+S[i-6]+S[i-4]
    #G_approx = s1+s2+s3+s4 with bias agreeing 24 for the true update function s1+s2+s3s4+s5s6s7
    # G[i] = S[i-7]+S[i-6]+S[i-5]+S[i-4]
#     G[i] = S[i-6]+S[i-5]
    
    
    
    # print(i,G[i])
    #create a matrix that will hold the final equations (the sum of those given with respect to the keystream bits + those given by the linear approximation)
EQ = list(var('eq%d' %i) for i in (0..256))


# Combine both forms of equations
# print(S)
# print(G)
for i in range(7,n):
    EQ[i] = (S[i]+G[i])
    # print(i,EQ[i])
# for i in range(7,40):
    # print(i,EQ[i])
#
EQ_1=EQ[7:n]
# 


#BUILD OUTPUT

V = [0,0,0,0,0,0,0]

#Define nonlinear feedback variable
fS = var('fS')


#initialise a random initial vector
for i in range(7):
    # V[i]= ntl.ZZ_random(2)
    V = [1, 0, 1, 0, 0, 0, 1]
    # V = [0, 1, 0, 1, 0, 0, 1]
#     V = [1, 1, 1, 1, 0, 1, 1]
#     V = [1, 1, 1, 0, 0, 1, 1]
# print(V)
#Define register S
RegS = [0]*len(V)
for i in range(len(V)):
    RegS[i] = V[i]
print(V)
b = [0]*207
#initialise a vector for the keystream
O = [0]*200

for i in range(len(V)):
    b[i] = V[i]
#we will only produce exactly as much keystream is needed to check our assumption
for i in range(200):
#
   # Generate ouput bit z
    O[i] = mod((RegS[0]+RegS[2]+RegS[3]+RegS[6]),2)

    #Calculate feedback bit for RegS (NONLINEAR)
    # fS= mod((RegS[0]+RegS[1]+RegS[5]+(RegS[2]*RegS[4]*RegS[6])),2)
    fS= mod((RegS[0]+RegS[1]+RegS[5]+(RegS[2]*RegS[4]*RegS[6])),2)

    b[i+7] = fS
#
   # Step register S by one and enter feedback into lsb
    for i in range(6):
        RegS[i]=RegS[i+1]

    RegS[6] = fS
# print(EQ[8])
# print(EQ_1[0])
# print(EQ_1[1])
# print(EQ_1[31])
# print(EQ_1[32])
# I = R.ideal(EQ_1) ;
# I.variety()
#V = [1, 0, 1, 0, 0, 0, 1]

# O = [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0]

for i in range(len(EQ_1)):
    EQ_1[i]=EQ_1[i].subs(y0=O[0], y1=O[1], y2=O[2], y3=O[3], y4=O[4], y5=O[5], y6=O[6], y7=O[7], y8=O[8], y9=O[9], y10=O[10], y11=O[11], y12=O[12], y13=O[13], y14=O[14], y15=O[15], y16=O[16], y17=O[17], y18=O[18], y19=O[19], y20=O[20], y21=O[21], y22=O[22], y23=O[23], y24=O[24], y25=O[25], y26=O[26], y27=O[27], y28=O[28], y29=O[29], y30=O[30], y31=O[31], y32=O[32], y33=O[33])
# for i in range(len(EQ_1)):
#     print(i,EQ_1[i])

#Define the polynomial ring over which the equations will be solved
R1.<s0,s1,s2,s3,s4,s5> = PolynomialRing(GF(2))

# Consider the system of equations as an ideal over a polynomial ring R1
I = R1.ideal(EQ_1)
# print(len(I))
# What initial values satisfy this ideal
I.variety()
# 
#Print initial values
# print(J)

#Print 'n' as proof the code has finished
print(n)
